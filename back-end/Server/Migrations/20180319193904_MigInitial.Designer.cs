// <auto-generated />
using Domain.Common;
using Domain.InstituicaoDomain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Server.Migrations
{
    [DbContext(typeof(BaseContext))]
    [Migration("20180319193904_MigInitial")]
    partial class MigInitial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("Domain.AreaInteresseDomain.AreaInteresse", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Ativo");

                    b.Property<long?>("CategoriaProfissionalID");

                    b.Property<string>("Descricao");

                    b.Property<string>("UsuarioInfoID");

                    b.HasKey("ID");

                    b.HasIndex("CategoriaProfissionalID");

                    b.HasIndex("UsuarioInfoID");

                    b.ToTable("ArItrs");
                });

            modelBuilder.Entity("Domain.CategoriaProfissionalDomain.CategoriaProfissional", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Ativo");

                    b.Property<string>("Descricao");

                    b.Property<string>("Nome");

                    b.HasKey("ID");

                    b.ToTable("CtgPrfsn");
                });

            modelBuilder.Entity("Domain.CursoDomain.Curso", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Ativo");

                    b.Property<string>("Descricao");

                    b.Property<string>("Nome");

                    b.HasKey("ID");

                    b.ToTable("Crs");
                });

            modelBuilder.Entity("Domain.CursoDomain.CursoGrade", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Ativo");

                    b.Property<long?>("CursoID");

                    b.Property<DateTime?>("DataCriacao");

                    b.Property<string>("Descricao");

                    b.HasKey("ID");

                    b.HasIndex("CursoID");

                    b.ToTable("CrsGrd");
                });

            modelBuilder.Entity("Domain.CursoDomain.CursoGradeMateria", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Ativo");

                    b.Property<long?>("CursoGradeID");

                    b.Property<string>("Descricao");

                    b.Property<long?>("MateriaID");

                    b.HasKey("ID");

                    b.HasIndex("CursoGradeID");

                    b.HasIndex("MateriaID");

                    b.ToTable("CrsGrdMtr");
                });

            modelBuilder.Entity("Domain.EnderecoDomain.Endereco", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Ativo");

                    b.Property<string>("Bairro");

                    b.Property<string>("Cidade");

                    b.Property<string>("Complemento");

                    b.Property<string>("Estado");

                    b.Property<string>("Lat");

                    b.Property<string>("Lon");

                    b.Property<string>("Numero");

                    b.Property<string>("Rua");

                    b.HasKey("ID");

                    b.ToTable("Endrc");
                });

            modelBuilder.Entity("Domain.InstituicaoDomain.Instituicao", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Ativo");

                    b.Property<string>("CNPJ");

                    b.Property<string>("Nome");

                    b.HasKey("ID");

                    b.ToTable("Ittc");
                });

            modelBuilder.Entity("Domain.InstituicaoDomain.InstituicaoCategoria", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Ativo");

                    b.Property<string>("Descricao");

                    b.Property<string>("Nome");

                    b.HasKey("ID");

                    b.ToTable("IttcCtgr");
                });

            modelBuilder.Entity("Domain.InstituicaoDomain.InstituicaoColaborador", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Ativo");

                    b.Property<long?>("InstituicaoID");

                    b.Property<string>("Perfis");

                    b.Property<string>("UsuarioID");

                    b.HasKey("ID");

                    b.HasIndex("InstituicaoID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("IttcClbd");
                });

            modelBuilder.Entity("Domain.InstituicaoDomain.InstituicaoColaboradorPerfil", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Ativo");

                    b.Property<long?>("InstituicaoID");

                    b.Property<string>("Nome");

                    b.Property<string>("Roles");

                    b.HasKey("ID");

                    b.HasIndex("InstituicaoID");

                    b.ToTable("IttcClbdPrf");
                });

            modelBuilder.Entity("Domain.InstituicaoDomain.InstituicaoCurso", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Ativo");

                    b.Property<long?>("CursoGradeID");

                    b.Property<long?>("CursoID");

                    b.Property<DateTime?>("DataExpiracao");

                    b.Property<DateTime>("DataInicio");

                    b.Property<long?>("InstituicaoID");

                    b.HasKey("ID");

                    b.HasIndex("CursoGradeID");

                    b.HasIndex("CursoID");

                    b.HasIndex("InstituicaoID");

                    b.ToTable("IttcCrs");
                });

            modelBuilder.Entity("Domain.InstituicaoDomain.InstituicaoCursoOcorrencia", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Ativo");

                    b.Property<string>("CoordenadorID");

                    b.Property<DateTime?>("DataExpiracao");

                    b.Property<DateTime?>("DataInicio");

                    b.Property<long?>("InstituicaoCursoID");

                    b.HasKey("ID");

                    b.HasIndex("CoordenadorID");

                    b.HasIndex("InstituicaoCursoID");

                    b.ToTable("IttcCrsOcrnc");
                });

            modelBuilder.Entity("Domain.InstituicaoDomain.InstituicaoCursoOcorrenciaAluno", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AlunoID");

                    b.Property<DateTime?>("Ativo");

                    b.Property<bool>("Confirmado");

                    b.Property<DateTime?>("DataExpiracao");

                    b.Property<DateTime?>("DataInicio");

                    b.Property<int>("ExpiracaoMotivo");

                    b.Property<long?>("InstituicaoCursoOcorrenciaID");

                    b.HasKey("ID");

                    b.HasIndex("AlunoID");

                    b.HasIndex("InstituicaoCursoOcorrenciaID");

                    b.ToTable("IttcCrsOcrncAln");
                });

            modelBuilder.Entity("Domain.InstituicaoDomain.InstituicaoCursoOcorrenciaNota", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Ativo");

                    b.Property<DateTime>("DataLancamento");

                    b.Property<string>("IDTag");

                    b.Property<long?>("InstituicaoCursoOcorrenciaPeriodoAlunoID");

                    b.Property<long?>("InstituicaoCursoOcorrenciaPeriodoProfessorID");

                    b.Property<double>("Valor");

                    b.HasKey("ID");

                    b.HasIndex("InstituicaoCursoOcorrenciaPeriodoAlunoID");

                    b.HasIndex("InstituicaoCursoOcorrenciaPeriodoProfessorID");

                    b.ToTable("IttcCrsOcrncNt");
                });

            modelBuilder.Entity("Domain.InstituicaoDomain.InstituicaoCursoOcorrenciaPeriodo", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Ativo");

                    b.Property<DateTime?>("DataExpiracao");

                    b.Property<DateTime?>("DataInicio");

                    b.Property<long?>("InstituicaoCursoOcorrenciaID");

                    b.HasKey("ID");

                    b.HasIndex("InstituicaoCursoOcorrenciaID");

                    b.ToTable("IttcCrsOcrncPrd");
                });

            modelBuilder.Entity("Domain.InstituicaoDomain.InstituicaoCursoOcorrenciaPeriodoAluno", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Ativo");

                    b.Property<bool>("Confirmado");

                    b.Property<long?>("InstituicaoCursoOcorrenciaAlunoID");

                    b.Property<long?>("InstituicaoCursoOcorrenciaPeriodoID");

                    b.Property<long?>("InstituicaoCursoPeriodoID");

                    b.Property<long?>("InstituicaoCursoTurmaID");

                    b.HasKey("ID");

                    b.HasIndex("InstituicaoCursoOcorrenciaAlunoID");

                    b.HasIndex("InstituicaoCursoOcorrenciaPeriodoID");

                    b.HasIndex("InstituicaoCursoPeriodoID");

                    b.HasIndex("InstituicaoCursoTurmaID");

                    b.ToTable("IttcCrsOcrncPrdAln");
                });

            modelBuilder.Entity("Domain.InstituicaoDomain.InstituicaoCursoOcorrenciaPeriodoProfessor", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Ativo");

                    b.Property<bool>("Confirmado");

                    b.Property<long?>("CursoGradeMateriaID");

                    b.Property<DateTime?>("DataExpiracao");

                    b.Property<DateTime?>("DataInicio");

                    b.Property<string>("FormulaNotaFinal");

                    b.Property<long?>("InstituicaoCursoOcorrenciaPeriodoID");

                    b.Property<long?>("InstituicaoCursoPeriodoID");

                    b.Property<long?>("InstituicaoCursoTurmaID");

                    b.Property<string>("ProfessorID");

                    b.HasKey("ID");

                    b.HasIndex("CursoGradeMateriaID");

                    b.HasIndex("InstituicaoCursoOcorrenciaPeriodoID");

                    b.HasIndex("InstituicaoCursoPeriodoID");

                    b.HasIndex("InstituicaoCursoTurmaID");

                    b.HasIndex("ProfessorID");

                    b.ToTable("IttcCrsOcrncPrdPrf");
                });

            modelBuilder.Entity("Domain.InstituicaoDomain.InstituicaoCursoOcorrenciaPeriodoProfessorPeriodoAula", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Ativo");

                    b.Property<int>("Dia");

                    b.Property<TimeSpan>("Fim");

                    b.Property<TimeSpan>("Inicio");

                    b.Property<long?>("InstituicaoCursoOcorrenciaPeriodoProfessorID");

                    b.HasKey("ID");

                    b.HasIndex("InstituicaoCursoOcorrenciaPeriodoProfessorID");

                    b.ToTable("IttcCrsOcrncPrdPrfPrdAul");
                });

            modelBuilder.Entity("Domain.InstituicaoDomain.InstituicaoCursoPeriodo", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Ativo");

                    b.Property<bool>("Dom");

                    b.Property<string>("Fim");

                    b.Property<string>("Inicio");

                    b.Property<long?>("InstituicaoCursoID");

                    b.Property<string>("PausaFim");

                    b.Property<string>("PausaInicio");

                    b.Property<bool>("Qua");

                    b.Property<long>("Quebras");

                    b.Property<bool>("Qui");

                    b.Property<bool>("Sab");

                    b.Property<bool>("Seg");

                    b.Property<bool>("Sex");

                    b.Property<bool>("Ter");

                    b.HasKey("ID");

                    b.HasIndex("InstituicaoCursoID");

                    b.ToTable("IttcCrsPrd");
                });

            modelBuilder.Entity("Domain.InstituicaoDomain.InstituicaoCursoTurma", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Ativo");

                    b.Property<DateTime?>("DataExpiracao");

                    b.Property<DateTime?>("DataInicio");

                    b.Property<string>("Descricao");

                    b.Property<long?>("InstituicaoCursoID");

                    b.Property<string>("Nome");

                    b.HasKey("ID");

                    b.HasIndex("InstituicaoCursoID");

                    b.ToTable("IttcCrsTrm");
                });

            modelBuilder.Entity("Domain.InstituicaoDomain.InstituicaoInstituicaoCategoria", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Ativo");

                    b.Property<long?>("InstituicaoCategoriaID");

                    b.Property<long?>("InstituicaoID");

                    b.HasKey("ID");

                    b.HasIndex("InstituicaoCategoriaID");

                    b.HasIndex("InstituicaoID");

                    b.ToTable("IttcIttcCtgr");
                });

            modelBuilder.Entity("Domain.MateriaDomain.Materia", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Ativo");

                    b.Property<string>("Descricao");

                    b.Property<string>("Nome");

                    b.HasKey("ID");

                    b.ToTable("Mtr");
                });

            modelBuilder.Entity("Domain.MateriaDomain.MateriaRelacionamento", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Ativo");

                    b.Property<long?>("MateriaPaiID");

                    b.Property<long?>("MateriaPrincipalID");

                    b.HasKey("ID");

                    b.HasIndex("MateriaPaiID");

                    b.HasIndex("MateriaPrincipalID");

                    b.ToTable("MtrRlc");
                });

            modelBuilder.Entity("Domain.UsuarioDomain.Aluno", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Ativo");

                    b.Property<string>("UsuarioInfoID");

                    b.HasKey("ID");

                    b.HasIndex("UsuarioInfoID");

                    b.ToTable("Aln");
                });

            modelBuilder.Entity("Domain.UsuarioDomain.Professor", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Ativo");

                    b.Property<string>("UsuarioInfoID");

                    b.HasKey("ID");

                    b.HasIndex("UsuarioInfoID");

                    b.ToTable("Prf");
                });

            modelBuilder.Entity("Domain.UsuarioDomain.Usuario", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Ativo");

                    b.Property<string>("Email");

                    b.Property<string>("Password");

                    b.Property<string>("Username");

                    b.Property<string>("UsuarioInfoID");

                    b.HasKey("ID");

                    b.HasIndex("UsuarioInfoID");

                    b.ToTable("Usr");
                });

            modelBuilder.Entity("Domain.UsuarioDomain.UsuarioInfo", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Ativo");

                    b.Property<string>("CPF");

                    b.Property<DateTime?>("DataNascimento");

                    b.Property<long?>("EnderecoID");

                    b.Property<string>("EstadoCivil");

                    b.Property<string>("Genero");

                    b.Property<string>("Nome");

                    b.Property<string>("RG");

                    b.Property<string>("Roles");

                    b.Property<string>("idMae");

                    b.Property<string>("idPai");

                    b.HasKey("ID");

                    b.HasIndex("EnderecoID");

                    b.HasIndex("idMae");

                    b.HasIndex("idPai");

                    b.ToTable("UsrInf");
                });

            modelBuilder.Entity("Domain.AreaInteresseDomain.AreaInteresse", b =>
                {
                    b.HasOne("Domain.CategoriaProfissionalDomain.CategoriaProfissional", "CategoriaProfissional")
                        .WithMany()
                        .HasForeignKey("CategoriaProfissionalID");

                    b.HasOne("Domain.UsuarioDomain.UsuarioInfo", "UsuarioInfo")
                        .WithMany()
                        .HasForeignKey("UsuarioInfoID");
                });

            modelBuilder.Entity("Domain.CursoDomain.CursoGrade", b =>
                {
                    b.HasOne("Domain.CursoDomain.Curso", "Curso")
                        .WithMany()
                        .HasForeignKey("CursoID");
                });

            modelBuilder.Entity("Domain.CursoDomain.CursoGradeMateria", b =>
                {
                    b.HasOne("Domain.CursoDomain.CursoGrade", "CursoGrade")
                        .WithMany()
                        .HasForeignKey("CursoGradeID");

                    b.HasOne("Domain.MateriaDomain.Materia", "Materia")
                        .WithMany()
                        .HasForeignKey("MateriaID");
                });

            modelBuilder.Entity("Domain.InstituicaoDomain.InstituicaoColaborador", b =>
                {
                    b.HasOne("Domain.InstituicaoDomain.Instituicao", "Instituicao")
                        .WithMany()
                        .HasForeignKey("InstituicaoID");

                    b.HasOne("Domain.UsuarioDomain.UsuarioInfo", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioID");
                });

            modelBuilder.Entity("Domain.InstituicaoDomain.InstituicaoColaboradorPerfil", b =>
                {
                    b.HasOne("Domain.InstituicaoDomain.Instituicao", "Instituicao")
                        .WithMany()
                        .HasForeignKey("InstituicaoID");
                });

            modelBuilder.Entity("Domain.InstituicaoDomain.InstituicaoCurso", b =>
                {
                    b.HasOne("Domain.CursoDomain.CursoGrade", "CursoGrade")
                        .WithMany()
                        .HasForeignKey("CursoGradeID");

                    b.HasOne("Domain.CursoDomain.Curso", "Curso")
                        .WithMany()
                        .HasForeignKey("CursoID");

                    b.HasOne("Domain.InstituicaoDomain.Instituicao", "Instituicao")
                        .WithMany()
                        .HasForeignKey("InstituicaoID");
                });

            modelBuilder.Entity("Domain.InstituicaoDomain.InstituicaoCursoOcorrencia", b =>
                {
                    b.HasOne("Domain.UsuarioDomain.UsuarioInfo", "Coordenador")
                        .WithMany()
                        .HasForeignKey("CoordenadorID");

                    b.HasOne("Domain.InstituicaoDomain.InstituicaoCurso", "InstituicaoCurso")
                        .WithMany()
                        .HasForeignKey("InstituicaoCursoID");
                });

            modelBuilder.Entity("Domain.InstituicaoDomain.InstituicaoCursoOcorrenciaAluno", b =>
                {
                    b.HasOne("Domain.UsuarioDomain.UsuarioInfo", "Aluno")
                        .WithMany()
                        .HasForeignKey("AlunoID");

                    b.HasOne("Domain.InstituicaoDomain.InstituicaoCursoOcorrencia", "InstituicaoCursoOcorrencia")
                        .WithMany()
                        .HasForeignKey("InstituicaoCursoOcorrenciaID");
                });

            modelBuilder.Entity("Domain.InstituicaoDomain.InstituicaoCursoOcorrenciaNota", b =>
                {
                    b.HasOne("Domain.InstituicaoDomain.InstituicaoCursoOcorrenciaPeriodoAluno", "InstituicaoCursoOcorrenciaPeriodoAluno")
                        .WithMany()
                        .HasForeignKey("InstituicaoCursoOcorrenciaPeriodoAlunoID");

                    b.HasOne("Domain.InstituicaoDomain.InstituicaoCursoOcorrenciaPeriodoProfessor", "InstituicaoCursoOcorrenciaPeriodoProfessor")
                        .WithMany()
                        .HasForeignKey("InstituicaoCursoOcorrenciaPeriodoProfessorID");
                });

            modelBuilder.Entity("Domain.InstituicaoDomain.InstituicaoCursoOcorrenciaPeriodo", b =>
                {
                    b.HasOne("Domain.InstituicaoDomain.InstituicaoCursoOcorrencia", "InstituicaoCursoOcorrencia")
                        .WithMany()
                        .HasForeignKey("InstituicaoCursoOcorrenciaID");
                });

            modelBuilder.Entity("Domain.InstituicaoDomain.InstituicaoCursoOcorrenciaPeriodoAluno", b =>
                {
                    b.HasOne("Domain.InstituicaoDomain.InstituicaoCursoOcorrenciaAluno", "InstituicaoCursoOcorrenciaAluno")
                        .WithMany()
                        .HasForeignKey("InstituicaoCursoOcorrenciaAlunoID");

                    b.HasOne("Domain.InstituicaoDomain.InstituicaoCursoOcorrenciaPeriodo", "InstituicaoCursoOcorrenciaPeriodo")
                        .WithMany()
                        .HasForeignKey("InstituicaoCursoOcorrenciaPeriodoID");

                    b.HasOne("Domain.InstituicaoDomain.InstituicaoCursoPeriodo", "InstituicaoCursoPeriodo")
                        .WithMany()
                        .HasForeignKey("InstituicaoCursoPeriodoID");

                    b.HasOne("Domain.InstituicaoDomain.InstituicaoCursoTurma", "InstituicaoCursoTurma")
                        .WithMany()
                        .HasForeignKey("InstituicaoCursoTurmaID");
                });

            modelBuilder.Entity("Domain.InstituicaoDomain.InstituicaoCursoOcorrenciaPeriodoProfessor", b =>
                {
                    b.HasOne("Domain.CursoDomain.CursoGradeMateria", "CursoGradeMateria")
                        .WithMany()
                        .HasForeignKey("CursoGradeMateriaID");

                    b.HasOne("Domain.InstituicaoDomain.InstituicaoCursoOcorrenciaPeriodo", "InstituicaoCursoOcorrenciaPeriodo")
                        .WithMany()
                        .HasForeignKey("InstituicaoCursoOcorrenciaPeriodoID");

                    b.HasOne("Domain.InstituicaoDomain.InstituicaoCursoPeriodo", "InstituicaoCursoPeriodo")
                        .WithMany()
                        .HasForeignKey("InstituicaoCursoPeriodoID");

                    b.HasOne("Domain.InstituicaoDomain.InstituicaoCursoTurma", "InstituicaoCursoTurma")
                        .WithMany()
                        .HasForeignKey("InstituicaoCursoTurmaID");

                    b.HasOne("Domain.UsuarioDomain.UsuarioInfo", "Professor")
                        .WithMany()
                        .HasForeignKey("ProfessorID");
                });

            modelBuilder.Entity("Domain.InstituicaoDomain.InstituicaoCursoOcorrenciaPeriodoProfessorPeriodoAula", b =>
                {
                    b.HasOne("Domain.InstituicaoDomain.InstituicaoCursoOcorrenciaPeriodoProfessor", "InstituicaoCursoOcorrenciaPeriodoProfessor")
                        .WithMany()
                        .HasForeignKey("InstituicaoCursoOcorrenciaPeriodoProfessorID");
                });

            modelBuilder.Entity("Domain.InstituicaoDomain.InstituicaoCursoPeriodo", b =>
                {
                    b.HasOne("Domain.InstituicaoDomain.InstituicaoCurso", "InstituicaoCurso")
                        .WithMany()
                        .HasForeignKey("InstituicaoCursoID");
                });

            modelBuilder.Entity("Domain.InstituicaoDomain.InstituicaoCursoTurma", b =>
                {
                    b.HasOne("Domain.InstituicaoDomain.InstituicaoCurso", "InstituicaoCurso")
                        .WithMany()
                        .HasForeignKey("InstituicaoCursoID");
                });

            modelBuilder.Entity("Domain.InstituicaoDomain.InstituicaoInstituicaoCategoria", b =>
                {
                    b.HasOne("Domain.InstituicaoDomain.InstituicaoCategoria", "InstituicaoCategoria")
                        .WithMany()
                        .HasForeignKey("InstituicaoCategoriaID");

                    b.HasOne("Domain.InstituicaoDomain.Instituicao", "Instituicao")
                        .WithMany()
                        .HasForeignKey("InstituicaoID");
                });

            modelBuilder.Entity("Domain.MateriaDomain.MateriaRelacionamento", b =>
                {
                    b.HasOne("Domain.MateriaDomain.Materia", "MateriaPai")
                        .WithMany()
                        .HasForeignKey("MateriaPaiID");

                    b.HasOne("Domain.MateriaDomain.Materia", "MateriaPrincipal")
                        .WithMany()
                        .HasForeignKey("MateriaPrincipalID");
                });

            modelBuilder.Entity("Domain.UsuarioDomain.Aluno", b =>
                {
                    b.HasOne("Domain.UsuarioDomain.UsuarioInfo", "UsuarioInfo")
                        .WithMany()
                        .HasForeignKey("UsuarioInfoID");
                });

            modelBuilder.Entity("Domain.UsuarioDomain.Professor", b =>
                {
                    b.HasOne("Domain.UsuarioDomain.UsuarioInfo", "UsuarioInfo")
                        .WithMany()
                        .HasForeignKey("UsuarioInfoID");
                });

            modelBuilder.Entity("Domain.UsuarioDomain.Usuario", b =>
                {
                    b.HasOne("Domain.UsuarioDomain.UsuarioInfo", "UsuarioInfo")
                        .WithMany()
                        .HasForeignKey("UsuarioInfoID");
                });

            modelBuilder.Entity("Domain.UsuarioDomain.UsuarioInfo", b =>
                {
                    b.HasOne("Domain.EnderecoDomain.Endereco", "Endereco")
                        .WithMany()
                        .HasForeignKey("EnderecoID");

                    b.HasOne("Domain.UsuarioDomain.UsuarioInfo", "Mae")
                        .WithMany()
                        .HasForeignKey("idMae");

                    b.HasOne("Domain.UsuarioDomain.UsuarioInfo", "Pai")
                        .WithMany()
                        .HasForeignKey("idPai");
                });
#pragma warning restore 612, 618
        }
    }
}
